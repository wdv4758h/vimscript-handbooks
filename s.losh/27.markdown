String Functions
================

Vim has many built-in functions to manipulate strings.  In this chapter
we'll look at a few of the most important ones.

Length
------

The first function we'll look at is `strlen`.  Run the following
command:

    :echom strlen("foo")

Vim displays `3`, which is the length of the string `"foo"`.  Now try
the following command:

    :echom len("foo")

Vim once again displays `3`.  When used with Strings `len` and `strlen`
have identical effects.  We'll come back to `len` later in the book.

Splitting
---------

Run the following command (note that it's an `echo` and not an `echom`):

    :echo split("one two three")

Vim displays `['one', 'two', 'three']`.  The `split` function splits a
String into a List.  We'll talk about Lists shortly, but for now don't
worry too much about them.

You can also tell Vim to use a separator other than "whitespace" for
splitting.  Run the following command:

    :echo split("one,two,three", ",")

Vim will once again display `['one', 'two', 'three']`, because the
second argument to `split` tells it to split the string on the comma
character instead of on whitespace.

Joining
-------

Not only can you split strings, you can also join them.  Run the
following command:

    :echo join(["foo", "bar"], "...")

Vim will display `foo...bar`.  Don't worry about the list syntax for
now.

`split` and `join` can be paired to great effect.  Run the following
command:

    :echo join(split("foo bar"), ";")

Vim displays `foo;bar`.  First we split the string `"foo bar"` into a
list, then we joined that list together using a semicolon as the
separator.

Lower and Upper Case
--------------------

Vim has two functions to change the case of Strings.  Run the following
commands:

    :echom tolower("Foo")
    :echom toupper("Foo")

Vim displays `foo` and `FOO`.  This should be pretty easy to understand.

In many languages (like Python) a common idiom is to force strings to
lowercase before comparing them to perform a case-insensitive
comparison.  In Vimscript this isn't necessary because we have the
case-insensitive comparison operators.  Reread the chapter on
comparisons if you don't remember those.

It's up to you to decide whether to use `tolower` and `==#`, or just
`==?` to perform case-sensitive comparisons.  There doesn't seem to be
any strong preference in the Vimscript community.  Pick one and stick to
it for all of your scripts.

From the help system
--------------------

### :help split()

`split({expr} [, {pattern} [, {keepempty}]])`
:   Make a `List` out of `{expr}`. When `{pattern}` is omitted or empty
    each white-separated sequence of characters becomes an item.
    Otherwise the string is split where `{pattern}` matches, removing the
    matched characters. `'ignorecase'` is not used here, add `\c` to ignore
    case. When the first or last item is empty it is omitted,
    unless the `{keepempty}` argument is given and it's non-zero.  Other
    empty items are kept when `{pattern}` matches at least one character
    or when `{keepempty}` is non-zero.
    Example:
    
        :let words = split(getline('.'), '\W\+')

    To split a string in individual characters:

        :for c in split(mystring, '\zs')
        
    If you want to keep the separator you can also use `'\zs'`:

        :echo split('abc:def:ghi', ':\zs')

    [`'abc:'`, `'def:'`, `'ghi'`]
    
    Splitting a table where the first element can be empty:

        :let items = split(line, ':', 1)
    
    The opposite function is `join()`.

### :help join()

`join({list} [, {sep}])`
:   Join the items in `{list}` together into one String. When `{sep}`
    is specified it is put in between the items.  If `{sep}` is omitted
    a single space is used.  Note that `{sep}` is not added at the end.
    You might want to add it there too:
    
        let lines = join(mylist, "\n") . "\n"

    String items are used as-is.  `Lists` and `Dictionaries` are
    converted into a string like with `string()`.  The opposite function
    is `split()`.

### :help functions

There are many functions.  We will mention them here, grouped by what
they are used for. 

String manipulation:

----------------    ----------------------------------------------------
`nr2char()`         get a character by its ASCII value
`char2nr()`         get ASCII value of a character
`str2nr()`          convert a string to a Number
`str2float()`       convert a string to a Float
`printf()`          format a string according to % items
`escape()`          escape characters in a string with a '\'
`shellescape()`     escape a string for use with a shell command
`fnameescape()`     escape a file name for use with a Vim command
`tr()`              translate characters from one set to another
`strtrans()`        translate a string to make it printable
`tolower()`         turn a string to lowercase
`toupper()`         turn a string to uppercase
`match()`           position where a pattern matches in a string
`matchend()`        position where a pattern match ends in a string
`matchstr()`        match of a pattern in a string
`matchlist()`       like matchstr() and also return submatches
`stridx()`          first index of a short string in a long string
`strridx()`         last index of a short string in a long string
`strlen()`          length of a string
`substitute()`      substitute a pattern match with a string
`submatch()`        get a specific match in ":s" and substitute()
`strpart()`         get part of a string
`expand()`          expand special keywords
`iconv()`           convert text from one encoding to another
`byteidx()`         byte index of a character in a string
`repeat()`          repeat a string multiple times
`eval()`            evaluate a string expression
------------------------------------------------------------------------

List manipulation:

-----------     --------------------------------------------------------
`get()`         get an item without error for wrong index
`len()`         number of items in a List
`empty()`       check if List is empty
`insert()`      insert an item somewhere in a List
`add()`         append an item to a List
`extend()`      append a List to a List
`remove()`      remove one or more items from a List
`copy()`        make a shallow copy of a List
`deepcopy()`    make a full copy of a List
`filter()`      remove selected items from a List
`map()`         change each List item
`sort()`        sort a List
`reverse()`     reverse the order of a List
`split()`       split a String into a List
`join()`        join List items into a String
`range()`       return a List with a sequence of numbers
`string()`      String representation of a List
`call()`        call a function with List as arguments
`index()`       index of a value in a List
`max()`         maximum value in a List
`min()`         minimum value in a List
`count()`       count number of times a value appears in a List
`repeat()`      repeat a List multiple times
-----------------------------------------------------------------------

Dictionary manipulation:

------------    -------------------------------------------------------
`get()`         get an entry without an error for a wrong key
`len()`         number of entries in a Dictionary
`has_key()`     check whether a key appears in a Dictionary
`empty()`       check if Dictionary is empty
`remove()`      remove an entry from a Dictionary
`extend()`      add entries from one Dictionary to another
`filter()`      remove selected entries from a Dictionary
`map()`         change each Dictionary entry
`keys()`        get List of Dictionary keys
`values()`      get List of Dictionary values
`items()`       get List of Dictionary key-value pairs
`copy()`        make a shallow copy of a Dictionary
`deepcopy()`    make a full copy of a Dictionary
`string()`      String representation of a Dictionary
`max()`         maximum value in a Dictionary
`min()`         minimum value in a Dictionary
`count()`       count number of times a value appears
-----------------------------------------------------------------------

Floating point computation:

------------    -------------------------------------------------------
`float2nr()`    convert Float to Number
`abs()`         absolute value (also works for Number)
`round()`       round off
`ceil()`        round up
`floor()`       round down
`trunc()`       remove value after decimal point
`log10()`       logarithm to base 10
`pow()`         value of x to the exponent y
`sqrt()`        square root
`sin()`         sine
`cos()`         cosine
`tan()`         tangent
`asin()`        arc sine
`acos()`        arc cosine
`atan()`        arc tangent
`atan2()`       arc tangent
`sinh()`        hyperbolic sine
`cosh()`        hyperbolic cosine
`tanh()`        hyperbolic tangent
-----------------------------------------------------------------------

Other computation:

----------      -------------------------------------------------------
`and()`         bitwise AND
`invert()`      bitwise invert
`or()`          bitwise OR
`xor()`         bitwise XOR
-----------------------------------------------------------------------

Variables:

-------------       ---------------------------------------------------
`type()`            type of a variable
`islocked()`        check if a variable is locked
`function()`        get a Funcref for a function name
`getbufvar()`       get a variable value from a specific buffer
`setbufvar()`       set a variable in a specific buffer
`getwinvar()`       get a variable from specific window
`gettabvar()`       get a variable from specific tab page
`gettabwinvar()`    get a variable from specific window & tab page
`setwinvar()`       set a variable in a specific window
`settabvar()`       set a variable in a specific tab page
`settabwinvar()`    set a variable in a specific window & tab page
`garbagecollect()`  possibly free memory
-----------------------------------------------------------------------

Cursor and mark position:

--------------  -------------------------------------------------------
`col()`         column number of the cursor or a mark
`virtcol()`     screen column of the cursor or a mark
`line()`        line number of the cursor or mark
`wincol()`      window column number of the cursor
`winline()`     window line number of the cursor
`cursor()`      position the cursor at a line/column
`getpos()`      get position of cursor, mark, etc.
`setpos()`      set position of cursor, mark, etc.
`byte2line()`   get line number at a specific byte count
`line2byte()`   byte count at a specific line
`diff_filler()` get the number of filler lines above a line
-----------------------------------------------------------------------

Working with text in the current buffer:

----------------    ---------------------------------------------------
`getline()`         get a line or list of lines from the buffer
`setline()`         replace a line in the buffer
`append()`          append line or list of lines in the buffer
`indent()`          indent of a specific line
`cindent()`         indent according to C indenting
`lispindent()`      indent according to Lisp indenting
`nextnonblank()`    find next non-blank line
`prevnonblank()`    find previous non-blank line
`search()`          find a match for a pattern
`searchpos()`       find a match for a pattern
`searchpair()`      find the other end of a start/skip/end
`searchpairpos()`   find the other end of a start/skip/end
`searchdecl()`      search for the declaration of a name
-----------------------------------------------------------------------

System functions and manipulation of files:

-----------------   ---------------------------------------------------
`glob()`            expand wildcards
`globpath()`        expand wildcards in a number of directories
`findfile()`        find a file in a list of directories
`finddir()`         find a directory in a list of directories
`resolve()`         find out where a shortcut points to
`fnamemodify()`     modify a file name
`pathshorten()`     shorten directory names in a path
`simplify()`        simplify a path without changing its meaning
`executable()`      check if an executable program exists
`filereadable()`    check if a file can be read
`filewritable()`    check if a file can be written to
`getfperm()`        get the permissions of a file
`getftype()`        get the kind of a file
`isdirectory()`     check if a directory exists
`getfsize()`        get the size of a file
`getcwd()`          get the current working directory
`haslocaldir()`     check if current window used |:lcd|
`tempname()`        get the name of a temporary file
`mkdir()`           create a new directory
`delete()`          delete a file
`rename()`          rename a file
`system()`          get the result of a shell command
`hostname()`        name of the system
`readfile()`        read a file into a List of lines
`writefile()`       write a List of lines into a file
-----------------------------------------------------------------------

Date and Time:

--------------  -------------------------------------------------------
`getftime()`    get last modification time of a file
`localtime()`   get current time in seconds
`strftime()`    convert time to a string
`reltime()`     get the current or elapsed time accurately
`reltimestr()`  convert reltime() result to a string
-----------------------------------------------------------------------

Buffers, windows and the argument list:

-----------------   ---------------------------------------------------
`argc()`            number of entries in the argument list
`argidx()`          current position in the argument list
`argv()`            get one entry from the argument list
`bufexists()`       check if a buffer exists
`buflisted()`       check if a buffer exists and is listed
`bufloaded()`       check if a buffer exists and is loaded
`bufname()`         get the name of a specific buffer
`bufnr()`           get the buffer number of a specific buffer
`tabpagebuflist()`  return List of buffers in a tab page
`tabpagenr()`       get the number of a tab page
`tabpagewinnr()`    like winnr() for a specified tab page
`winnr()`           get the window number for the current window
`bufwinnr()`        get the window number of a specific buffer
`winbufnr()`        get the buffer number of a specific window
`getbufline()`      get a list of lines from the specified buffer
-----------------------------------------------------------------------

Command line:

--------------  -------------------------------------------------------
`getcmdline()`  get the current command line
`getcmdpos()`   get position of the cursor in the command line
`setcmdpos()`   set position of the cursor in the command line
`getcmdtype()`  return the current command-line type
-----------------------------------------------------------------------

Quickfix and location lists:

-------------   -------------------------------------------------------
`getqflist()`   list of quickfix errors
`setqflist()`   modify a quickfix list
`getloclist()`  list of location list items
`setloclist()`  modify a location list
-----------------------------------------------------------------------

Insert mode completion:

-----------------   ---------------------------------------------------
`complete()`        set found matches
`complete_add()`    add to found matches
`complete_check()`  check if completion should be aborted
`pumvisible()`      check if the popup menu is displayed
-----------------------------------------------------------------------

Folding:

------------------  ---------------------------------------------------
`foldclosed()`      check for a closed fold at a specific line
`foldclosedend()`   like foldclosed() but return the last line
`foldlevel()`       check for the fold level at a specific line
`foldtext()`        generate the line displayed for a closed fold
`foldtextresult()`  get the text displayed for a closed fold
-----------------------------------------------------------------------

Syntax and highlighting:

------------------  ---------------------------------------------------
`clearmatches()`    clear all matches defined by matchadd() and
                    the :match commands

`getmatches()`      get all matches defined by matchadd() and
                    the :match commands
                    
`hlexists()`        check if a highlight group exists

`hlID()`            get ID of a highlight group

`synID()`           get syntax ID at a specific position

`synIDattr()`       get a specific attribute of a syntax ID

`synIDtrans()`      get translated syntax ID

`synstack()`        get list of syntax IDs at a specific position

`synconcealed()`    get info about concealing

`diff_hlID()`       get highlight ID for diff mode at a position

`matchadd()`        define a pattern to highlight (a "match")

`matcharg()`        get info about :match arguments

`matchdelete()`     delete a match defined by matchadd() or a
                    :match command

`setmatches()`      restore a list of matches saved by
`                   getmatches()`
-----------------------------------------------------------------------

Spelling:

----------------    -------------------------------------------------------
`spellbadword()`    locate badly spelled word at or after cursor
`spellsuggest()`    return suggested spelling corrections
`soundfold()`       return the sound-a-like equivalent of a word
---------------------------------------------------------------------------

History:

------------    -------------------------------------------------------
`histadd()`     add an item to a history
`histdel()`     delete an item from a history
`histget()`     get an item from a history
`histnr()`      get highest index of a history list
-----------------------------------------------------------------------

Interactive:

---------------  -------------------------------------------------------
`browse()`       put up a file requester
`browsedir()`    put up a directory requester
`confirm()`      let the user make a choice
`getchar()`      get a character from the user
`getcharmod()`   get modifiers for the last typed character
`feedkeys()`     put characters in the typeahead queue
`input()`        get a line from the user
`inputlist()`    let the user pick an entry from a list
`inputsecret()`  get a line from the user without showing it
`inputdialog()`  get a line from the user in a dialog
`inputsave()`    save and clear typeahead
`inputrestore()` restore typeahead
-----------------------------------------------------------------------

GUI:

------------------  ---------------------------------------------------
`getfontname()`     get name of current font being used
`getwinposx()`      X position of the GUI Vim window
`getwinposy()`      Y position of the GUI Vim window
-----------------------------------------------------------------------

Vim server:

---------------------   ---------------------------------------------------
`serverlist()`          return the list of server names
`remote_send()`         send command characters to a Vim server
`remote_expr()`         evaluate an expression in a Vim server
`server2client()`       send a reply to a client of a Vim server
`remote_peek()`         check if there is a reply from a Vim server
`remote_read()`         read a reply from a Vim server
`foreground()`          move the Vim window to the foreground
`remote_foreground()`   move the Vim server window to the foreground
---------------------------------------------------------------------------

Window size and position:

--------------  -------------------------------------------------------
`winheight()`   get height of a specific window
`winwidth()`    get width of a specific window
`winrestcmd()`  return command to restore window sizes
`winsaveview()` get view of current window
`winrestview()` restore saved view of current window
-----------------------------------------------------------------------

Mappings:

--------------      -------------------------------------------------------
`hasmapto()`        check if a mapping exists
`mapcheck()`        check if a matching mapping exists
`maparg()`          get rhs of a mapping
`wildmenumode()`    check if the wildmode is active
---------------------------------------------------------------------------

Various:

----------------------  ---------------------------------------------------
`mode()`                get current editing mode
`visualmode()`          last visual mode used
`exists()`              check if a variable, function, etc. exists
`has()`                 check if a feature is supported in Vim
`changenr()`            return number of most recent change
`cscope_connection()`   check if a cscope connection exists
`did_filetype()`        check if a FileType autocommand was used
`eventhandler()`        check if invoked by an event handler
`getpid()`              get process ID of Vim
`libcall()`             call a function in an external library
`libcallnr()`           idem, returning a number
`getreg()`              get contents of a register
`getregtype()`          get type of a register
`setreg()`              set contents and type of a register
`taglist()`             get list of matching tags
`tagfiles()`            get a list of tags files
`mzeval()`              evaluate MzScheme expression
--------------------------------------------------------------------------

Exercises
---------

Run `:echo split('1   2')` and `:echo split('1,,,2', ',')`.  Do they
behave the same?

Read `:help functions` and skim the list of built-in functions for ones
that mention the word "String".  Use the `/` command to make it easier
(remember, Vim's help files can be navigated like any other kind of
file).  There are a *lot* of functions here, so don't feel like you need
to read the documentation for every single one.  Just try to get an idea
of what's available if you need it in the future.

External Commands
=================

Vim follows the UNIX philosophy of "do one thing well".  Instead of
trying to cram all the functionality you could ever want inside the
editor itself, the right way to use Vim is to delegate to external
commands when appropriate.

Let's add some interaction with the Potion compiler to our plugin to get
our feet wet with external commands in Vim.

Compiling
---------

First we'll add a command to compile and run the current Potion file.
There are a number of ways to do this, but we'll simply use an external
command for now.

Create a `potion/ftplugin/potion/running.vim` file in your plugin's
repo.  This is where we'll create the mappings for compiling and running
Potion files.

    if !exists("g:potion_command")
        let g:potion_command = "potion"
    endif

    function! PotionCompileAndRunFile()
        silent !clear
        execute "!" . g:potion_command . " " . bufname("%")
    endfunction

    nnoremap <buffer> <localleader>r :call PotionCompileAndRunFile()<cr>

The first chunk stores the command used to execute Potion in a global
variable, if that variable isn't already set.  We've seen this kind of
check before.

This will allow users to override it if `potion` isn't in their `$PATH`
by putting a line like `let g:potion_command =
"/Users/sjl/src/potion/potion"` in their `~/.vimrc` file.

The last line adds a buffer-local mapping that calls a function we've
defined above.  Remember that because this file is in the
`ftdetect/potion` directory it will be run every time a file's
`filetype` is set to `potion`.

The real functionality is in the `PotionCompileAndRunFile()` function.
Go ahead and save this file, open up `factorial.pn` and press
`<localleader>r` to run the mapping and see what happens.

If `potion` is in your `$PATH`, the file should be run and you should
see its output in your terminal (or at the bottom of the window if
you're using a GUI Vim).  If you get an error about the `potion` command
not being found, you'll need to set `g:potion_command` in your
`~/.vimrc` file as mentioned above.

Let's take a look at how `PotionCompileAndRunFile()` function works.

Bang!
-----

The `:!` command (pronounced "bang") in Vim runs external commands and
displays their output on the screen.  Try it out by running the
following command:

    :!ls

Vim should show you the output of the `ls` command, as well as a "Press
ENTER or type command to continue" prompt.

Vim doesn't pass any input to the command when run this way.  Confirm
this by running:

    :!cat

Type a few lines and you'll see that the `cat` command spits them back
out, just as it normally would if you ran `cat` outside of Vim.  Use
Ctrl-D to finish.

To run an external command without the `Press ENTER or type command to
continue` prompt, use `:silent !`.  Run the following command:

    :silent !echo Hello, world.

If you run this in a GUI Vim like MacVim or gVim, you won't see the
`Hello, world.` output of the command.

If you run it in a terminal Vim, your results may vary depending on your
configuration.  You may need to run `:redraw!` to fix your screen after
running a bare `:silent !`.

Note that this command is `:silent !` and not `:silent!` (see the
space?)!  Those are two different commands, and we want the former!
Isn't Vimscript great?

Let's look back at the `PotionCompileAndRun()` function:

    function! PotionCompileAndRunFile()
        silent !clear
        execute "!" . g:potion_command . " " . bufname("%")
    endfunction

First we run a `silent !clear` command, which should clear the screen
without a `Press ENTER...` prompt.  This will make sure we only see the
output of this run, which is helpful when you're running the same
commands over and over.

The next line uses our old friend `execute` to build a command
dynamically.  The command it builds will look something like this:

    !potion factorial.pn

Notice that there's no `silent` here, so the user will see the output of
the command and will have to press enter to go back to Vim.  This is
what we want for this particular mapping, so we're all set.

Displaying Bytecode
-------------------

The Potion compiler has an option that will let you view the bytecode it
generates as it compiles.  This can be handy if you're trying to debug
your program at a very low level.  Try it out by running the following
command at a shell prompt:

    potion -c -V factorial.pn

You should see a lot of output that looks like this:

    -- parsed --
    code ...
    -- compiled --
    ; function definition: 0x109d6e9c8 ; 108 bytes
    ; () 3 registers
    .local factorial ; 0
    .local print_line ; 1
    .local print_factorial ; 2
    ...
    [ 2] move     1 0
    [ 3] loadk    0 0   ; string
    [ 4] bind     0 1
    [ 5] loadpn   2 0   ; nil
    [ 6] call     0 2
    ...

Let's add a mapping that will let the user view the bytecode generated
for the current Potion file in a Vim split so they can easily navigate
and examine it.

First, add the following line to the bottom of
`ftplugin/potion/running.vim`:

    nnoremap <buffer> <localleader>b :call PotionShowBytecode()<cr>

Nothing special there -- it's just a simple mapping.  Now let's sketch
out the function that will do the work:

    function! PotionShowBytecode()
        " Get the bytecode.

        " Open a new split and set it up.

        " Insert the bytecode.

    endfunction

Now that we've got a little skeleton set up, let's talk about how to
make it happen.

system()
--------

There are a number of ways we could implement this, so I'll choose one
that will come in handy later for you.

Run the following command:

    :echom system("ls")

You should see the output of the `ls` command at the bottom of your
screen.  If you run `:messages` you'll see it there too.  The `system()`
Vim function takes a command string as a parameter and returns the
output of that command as a String.

You can pass a second string as an argument to `system()`.  Run the
following command:

    :echom system("wc -c", "abcdefg")

Vim will display `7` (with some padding).  If you pass a second argument
like this, Vim will write it to a temporary file and pipe it into the
command on standard input.  For our purposes we won't need this, but
it's good to know.

Back to our function.  Edit `PotionShowBytecode()` to fill out the first
part of the skeleton like this:

    function! PotionShowBytecode()
        " Get the bytecode.
        let bytecode = system(g:potion_command . " -c -V " . bufname("%"))
        echom bytecode

        " Open a new split and set it up.

        " Insert the bytecode.

    endfunction

Go ahead and try it out by saving the file, running `:set ft=potion` in
`factorial.pn` to reload it, and using the `<localleader>b` mapping.
Vim should display the bytecode at the bottom of the screen.  Once you
can see it's working you can remove the `echom` line.

Scratch Splits
--------------

Next we're going to open up a new split window for the user to show the
results.  This will let the user view and navigate the bytecode with all
the power of Vim, instead of just reading it once from the screen.

To do this we're going to create a "scratch" split: a split containing a
buffer that's never going to be saved and will be overwritten each time
we run the mapping.  Change the `PotionShowBytecode()` function to look
like this:

    function! PotionShowBytecode()
        " Get the bytecode.
        let bytecode = system(g:potion_command . " -c -V " . bufname("%"))

        " Open a new split and set it up.
        vsplit __Potion_Bytecode__
        normal! ggdG
        setlocal filetype=potionbytecode
        setlocal buftype=nofile

        " Insert the bytecode.

    endfunction

These new command should be pretty easy to follow.

`vsplit` creates a new vertical split for a buffer named
`__Potion_Bytecode__`.  We surround the name with underscores to make it
clearer to the user that this isn't a normal file (it's a buffer just to
hold the output).  The underscores aren't special, they're just a
convention.

Next we delete everything in this buffer with `normal! ggdG`.  The first
time the mapping is run this won't do anything, but subsequent times
we'll be reusing the `__Potion_Bytecode__` buffer, so this clears it.

Next we prepare the buffer by setting two local settings.  First we set
its filetype to `potionbytecode`, just to make it clear what it's
holding.  We also change the `buftype` setting to `nofile`, which tells
Vim that this buffer isn't related to a file on disk and so it should
never try to write it.

All that's left is to dump the bytecode that we saved into the
`bytecode` variable into this buffer.  Finish off the function by making
it look like this:

    function! PotionShowBytecode()
        " Get the bytecode.
        let bytecode = system(g:potion_command .
        \   " -c -V " . bufname("%") . " 2>&1")

        " Open a new split and set it up.
        vsplit __Potion_Bytecode__
        normal! ggdG
        setlocal filetype=potionbytecode
        setlocal buftype=nofile

        " Insert the bytecode.
        call append(0, split(bytecode, '\v\n'))
    endfunction

The `append()` Vim function takes two arguments: a line number to append
after, and a list of Strings to append as lines.  For example, try
running the following command:

    :call append(3, ["foo", "bar"])

This will append two lines, `foo` and `bar`, below line 3 in your
current buffer.  In this case we're appending below line 0, which means
"at the top of the file".

We need a list of Strings to append, but we just have a single string
with newline characters embedded in it from when we used `system()`.  We
use Vim's `split()` function to split that giant hunk of text into a
list of Strings.  `split()` takes a String to split and a regular
expression to find the split points.  It's pretty simple.

Now that the function is complete, go ahead and try out the mapping.
When you run `<localleader>b` in the `factorial.pn` buffer Vim will open
a new buffer containing the Potion bytecode.  Play around with it by
changing the source, saving the file, and running the mapping again to
see the bytecode change.

From the help system
--------------------

### :help bufname

`bufname({expr})`

The result is the name of a buffer, as it is displayed by the `":ls"`
command.  If `{expr}` is a Number, that buffer number's name is given.
Number zero is the alternate buffer for the current window.  If `{expr}`
is a String, it is used as a |file-pattern| to match with the buffer
names.    This is always done like 'magic' is set and 'cpoptions' is
empty.  When there is more than one match an empty string is returned.
`""` or `"%"` can be used for the current buffer, `"#"` for the
alternate buffer.  A full match is preferred, otherwise a match at the
start, end or middle of the buffer name is accepted.  If you only want a
full match then put `"^"` at the start and `"$"` at the end of the
pattern.  Listed buffers are found first.  If there is a single match
with a listed buffer, that one is returned.  Next unlisted buffers are
searched for.  If the `{expr}` is a String, but you want to use it as a
buffer number, force it to be a Number by adding zero to it:
    
    :echo bufname("3" + 0)

If the buffer doesn't exist, or doesn't have a name, an empty
string is returned.
    
    bufname("#")        alternate buffer name
    bufname(3)          name of buffer 3
    bufname("%")        name of current buffer
    bufname("file2")    name of buffer where "file2" matches.

Obsolete name: `buffer_name()`.

### :help buftype

`'buftype' 'bt' -- string (default: "") -- local to buffer`
The value of this option specifies the type of a buffer:

    <empty>    normal buffer
    nofile     buffer which is not related to a file and will not be
               written
    nowrite    buffer which will not be written
    acwrite    buffer which will always be written with BufWriteCmd
               autocommands. {not available when compiled without the
               |+autocmd| feature}
    quickfix   quickfix buffer, contains list of errors |:cwindow|
               or list of locations |:lwindow|
    help       help buffer (you are not supposed to set this
               manually)

This option is used together with 'bufhidden' and 'swapfile' to specify
special kinds of buffers.

Be careful with changing this option, it can have many side effects!

A `"quickfix"` buffer is only used for the error list and the location
list.  This value is set by the `:cwindow` and `:lwindow` commands and
you are not supposed to change it.

`"nofile"` and `"nowrite"` buffers are similar:

    both:        The buffer is not to be written to disk, ":w" doesn't
                 work (":w filename" does work though).
    both:        The buffer is never considered to be |'modified'|.
                 There is no warning when the changes will be lost, for
                 example when you quit Vim.
    both:        A swap file is only created when using too much memory
                 (when 'swapfile' has been reset there is never a swap
                 file).
    nofile only: The buffer name is fixed, it is not handled like a
                 file name.  It is not modified in response to a |:cd|
                 command.

`"acwrite"` implies that the buffer name is not related to a file, like
`"nofile"`, but it will be written.  Thus, in contrast to `"nofile"` and
`"nowrite"`, `":w"` does work and a modified buffer can't be abandoned
without saving.  For writing there must be matching `BufWriteCmd`,
`FileWriteCmd` or `FileAppendCmd` autocommands.

### :help append()

`append({lnum}, {expr})`

When `{expr}` is a `List`: Append each item of the `List` as a text line
below line `{lnum}` in the current buffer.  Otherwise append `{expr}` as
one text line below line `{lnum}` in the current buffer.  `{lnum}` can
be zero to insert a line before the first one.  Returns 1 for failure
(`{lnum}` out of range or out of memory), 0 for success. Example:

    :let failed = append(line('$'), "# THE END")
    :let failed = append(0, ["Chapter 1", "the beginning"])

### :help split()

`split({expr} [, {pattern} [, {keepempty}]])`

Make a `List` out of `{expr}`.  When `{pattern}` is omitted or empty
each white-separated sequence of characters becomes an item.  Otherwise
the string is split where `{pattern}` matches, removing the matched
characters. 'ignorecase' is not used here, add `\c` to ignore case.
`/\c` When the first or last item is empty it is omitted, unless the
`{keepempty}` argument is given and it's non-zero.  Other empty items
are kept when `{pattern}` matches at least one character or when
`{keepempty}` is non-zero.  Example:

    :let words = split(getline('.'), '\W\+')

To split a string in individual characters:

    :for c in split(mystring, '\zs')

If you want to keep the separator you can also use `'\zs'`:

    :echo split('abc:def:ghi', ':\zs')
    ['abc:', 'def:', 'ghi'] ~

Splitting a table where the first element can be empty:

    :let items = split(line, ':', 1)

The opposite function is `join()`.

### :help :!

`:!{cmd}`

Execute `{cmd}` with the shell.  See also the `'shell'` and
`'shelltype'` option.  Any `'!'` in `{cmd}` is replaced with the
previous external command (see also `'cpoptions'`).  But not when there
is a backslash before the `'!'`, then that backslash is removed.
Example: `":!ls"` followed by `":!echo ! \! \\!"` executes `"echo ls !
\!"`.  After the command has been executed, the timestamp of the current
file is checked |timestamp|.  A `'|'` in `{cmd}` is passed to the shell,
you cannot use it to append a Vim command.  See |:bar|.  A newline
character ends `{cmd}`, what follows is interpreted as a following `":"`
command.  However, if there is a backslash before the newline it is
removed and `{cmd}` continues.  It doesn't matter how many backslashes
are before the newline, only one is removed.  On Unix the command
normally runs in a non-interactive shell.  If you want an interactive
shell to be used (to use aliases) set `'shellcmdflag'` to `"-ic"`.  Vim
redraws the screen after the command is finished, because it may have
printed any text.  This requires a hit-enter prompt, so that you can
read any messages.  To avoid this use:
    
    :silent !{cmd}

The screen is not redrawn then, thus you have to use `CTRL-L` or
`":redraw!"` if the command did display something.

### :help :read

`:r[ead] [++opt] [name]`

Insert the file `[name]` (default: current file) below the cursor.  See
`++opt` for the possible values of [++opt].

`:{range}r[ead] [++opt] [name]`

Insert the file [name] (default: current file) below the specified line.
See `++opt` for the possible values of [++opt].

`:[range]r[ead] [++opt] !{cmd}`

Execute `{cmd}` and insert its standard output below the cursor or the
specified line.  A temporary file is used to store the output of the
command which is then read into the buffer.  `'shellredir'` is used to
save the output of the command, which can be set to include stderr or
not.  `{cmd}` is executed like with `":!{cmd}"`, any `'!'` is replaced
with the previous command `:!`.  See `++opt` for the possible values of
[++opt].

These commands insert the contents of a file, or the output of a
command, into the buffer.  They can be undone.  They cannot be repeated
with the `"."` command.  They work on a line basis, insertion starts
below the line in which the cursor is, or below the specified line.  To
insert text above the first line use the command `":0r {name}"`.

After the `":read"` command, the cursor is left on the first non-blank
in the first new line.  Unless in Ex mode, then the cursor is left on
the last new line (sorry, this is Vi compatible).

If a file name is given with `":r"`, it becomes the alternate file.
This can be used, for example, when you want to edit that file instead:
`":e! #"`.  This can be switched off by removing the 'a' flag from the
'cpoptions' option.

Of the [++opt] arguments one is specifically for `":read"`, the ++edit
argument.  This is useful when the `":read"` command is actually used to
read a file into the buffer as if editing that file.  Use this command
in an empty buffer: >
    
    :read ++edit filename

The effect is that the `'fileformat'`, `'fileencoding'`, `'bomb'`, etc.
options are set to what has been detected for `"filename"`.  Note that a
single empty line remains, you may want to delete it.

### :help system()

`system({expr} [, {input}])`

Get the output of the shell command `{expr}`.  When `{input}` is given,
this string is written to a file and passed as stdin to the command.
The string is written as-is, you need to take care of using the correct
line separators yourself.  Pipes are not used.  Note: Use
`shellescape()` to escape special characters in a command argument.
Newlines in `{expr}` may cause the command to fail.  The characters in
'shellquote' and 'shellxquote' may also cause trouble.  This is not to
be used for interactive commands.

The result is a String.  Example:
    
    :let files = system("ls " .  shellescape(expand('%:h')))

To make the result more system-independent, the shell output is filtered
to replace `<CR>` with `<NL>` for Macintosh, and `<CR>``<NL>` with
`<NL>` for DOS-like systems.  To avoid the string being truncated at a
NUL, all NUL characters are replaced with SOH (0x01).

The command executed is constructed using several options: `'shell'`
`'shellcmdflag'` `'shellxquote'` `{expr}` `'shellredir'` `{tmp}`
`'shellxquote'` (`{tmp}` is an automatically generated file name).  For
Unix and OS/2 braces are put around `{expr}` to allow for concatenated
commands.

The command will be executed in `"cooked"` mode, so that a `CTRL-C` will
interrupt the command (on Unix at least).

The resulting error code can be found in `v:shell_error`.  This function
will fail in `restricted-mode`.

Note that any wrong value in the options mentioned above may make the
function fail.  It has also been reported to fail when using a security
agent application.  Unlike `":!cmd"` there is no automatic check for
changed files.  Use `:checktime` to force a check.

### :help design-not

- Vim is not a shell or an Operating System.  You will not be able to
  run a shell inside Vim or use it to control a debugger.  This should
  work the other way around: Use Vim as a component from a shell or in
  an IDE.  A satirical way to say this: "Unlike Emacs, Vim does not
  attempt to include everything but the kitchen sink, but some people
  say that you can clean one with it.  ;-)" To use Vim with gdb see:
  http://www.agide.org and http://clewn.sf.net.
- Vim is not a fancy GUI editor that tries to look nice at the cost of
  being less consistent over all platforms.  But functional GUI features
  are welcomed.

### :help bufwinnr()

`bufwinnr({expr})`

The result is a Number, which is the number of the first window
associated with buffer `{expr}`.  For the use of `{expr}`, see
`bufname()` above. If buffer `{expr}` doesn't exist or there is no such
window, -1 is returned.  Example:

    echo "A window containing buffer 1 is " . (bufwinnr(1))

The number can be used with `CTRL-W_w` and `":wincmd w"` `:wincmd`.
Only deals with the current tab page.

Exercises
---------

Currently our mappings require that the user save the file themselves before
running the mapping in order for their changes to take effect.  Undo is cheap
these days, so edit the functions we wrote to save the current file for them.

What happens when you run the bytecode mapping on a Potion file with a syntax
error?  Why does that happen?

Change the `PotionShowBytecode()` function to detect when the Potion compiler
returns an error, and show an error message to the user.

Extra Credit
------------

Each time you run the bytecode mapping a new vertical split will be created,
even if the user hasn't closed the previous one.  If the user doesn't bother
closing them they could end up with many extra windows stacked up.

Change `PotionShowBytecode()` to detect with a window is already open for the
`__Potion_Bytecode__` buffer, and when that's the case switch to it instead of
creating a new split.

You'll probably want to read `:help bufwinnr()` for this one.

More Extra Credit
-----------------

Remember how we set the `filetype` of the temporary buffer to `potionbytecode`?
Create a `syntax/potionbytecode.vim` file and define syntax highlighting for
Potion bytecode buffers to make them easier to read.


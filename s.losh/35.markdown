Lists
=====

We've worked a lot with variables so far, but we haven't talked about
aggregates at all yet!  Vim has two main aggregate types, and we'll look
at the first now: lists.

Vimscript lists are ordered, heterogeneous collections of elements.  Run
the following command:

    :echo ['foo', 3, 'bar']

Vim displays the list.  Lists can of course be nested.  Run the
following command:

    :echo ['foo', [3, 'bar']]

Vim happily displays the list.

Indexing
--------

Vimscript lists are zero-indexed, and you can get at the elements in the
usual way.  Run this command:

    :echo [0, [1, 2]][1]

Vim displays `[1, 2]`.  You can also index from the end of the list,
much like Python.  Try this command:

    :echo [0, [1, 2]][-2]

Vim displays `0`.  The index `-1` refers to the last element in the
list, `-2` is the second-to-last, and so on.

Slicing
-------

Vim lists can also be sliced.  This will *look* familiar to Python
programmers, but it does *not* always act the same way!  Run this
command:

    :echo ['a', 'b', 'c', 'd', 'e'][0:2]

Vim displays `['a', 'b', 'c']` (elements 0, 1 and 2).  You can safely
exceed the upper bound as well.  Try this command:

    :echo ['a', 'b', 'c', 'd', 'e'][0:100000]

Vim simply displays the entire list.

Slice indexes can be negative.  Try this command:

    :echo ['a', 'b', 'c', 'd', 'e'][-2:-1]

Vim displays `['d', 'e']` (elements -2 and -1).

When slicing lists you can leave off the first index to mean "the
beginning" and/or the last index to mean "the end".  Run the following
commands:

    :echo ['a', 'b', 'c', 'd', 'e'][:1]
    :echo ['a', 'b', 'c', 'd', 'e'][3:]

Vim displays `['a', 'b']` and `['d', 'e']`.

Like Python, Vimscript allows you to index and slice strings too.  Run
the following command:

    :echo "abcd"[0:2]

Vim displays `abc`. However, you can't use negative bare indices with
strings.  You *can* use negative indices when slicing strings though!
Run the following command:

    :echo "abcd"[-1] . "abcd"[-2:]

Vim displays `cd` (using a negative index silently resulted in an empty
string).

Concatenation
-------------

You can combine Vim lists with `+`.  Try this command:

    :echo ['a', 'b'] + ['c']

Vim, unsurprisingly, displays `['a', 'b', 'c']`.  There's not much else
to say here -- Vimscript lists are surprisingly sane compared to the
rest of the language.

List Functions
--------------

Vim has a number of built-in functions for working with lists.  Run
these commands:

    :let foo = ['a']
    :call add(foo, 'b')
    :echo foo

Vim mutates the list `foo` in-place to append `'b'` and displays `['a',
'b']`.  Now run this command:

    :echo len(foo)

Vim displays `2`, the length of the list.  Try these commands:

    :echo get(foo, 0, 'default')
    :echo get(foo, 100, 'default')

Vim displays `a` and `default`.  The `get` function will get the item at
the given index from the given list, or return the given default value
if the index is out of range in the list.

Run this command:

    :echo index(foo, 'b')
    :echo index(foo, 'nope')

Vim displays `1` and `-1`.  The `index` function returns the first index
of the given item in the given list, or `-1` if the item is not in the
list.

Now run this command:

    :echo join(foo)
    :echo join(foo, '---')
    :echo join([1, 2, 3], '')

Vim displays `a b`, `a---b`, and `123`.  `join` will join the items in
the given list together into a string, separated by the given separator
string (or a space if none is given), coercing each item to a string if
necessary/possible.

Run the following commands:

    :call reverse(foo)
    :echo foo
    :call reverse(foo)
    :echo foo

Vim displays `['b', 'a']` and then `['a', 'b']`.  `reverse` reverses the
given list *in place*.

From the help system
--------------------

### :help List

A List is an ordered sequence of items.  An item can be of any type.
Items can be accessed by their index number.    Items can be added and
removed at any position in the sequence.


#### List creation

A List is created with a comma separated list of items in square
brackets.  Examples:

    :let mylist = [1, two, 3, "four"]
    :let emptylist = []

An item can be any expression.    Using a List for an item creates a List
of Lists:

    :let nestlist = [[11, 12], [21, 22], [31, 32]]

An extra comma after the last item is ignored.

#### List index

An item in the List can be accessed by putting the index in square
brackets after the List.  Indexes are zero-based, thus the first item
has index zero.

    :let item = mylist[0]        " get the first item: 1
    :let item = mylist[2]        " get the third item: 3

When the resulting item is a list this can be repeated:

    :let item = nestlist[0][1]    " get the first list, second item: 12

A negative index is counted from the end.  Index -1 refers to the last
item in the List, -2 to the last but one item, etc.

    :let last = mylist[-1]        " get the last item: "four"

To avoid an error for an invalid index use the `get()` function.  When
an item is not available it returns zero or the default value you
specify:

    :echo get(mylist, idx)
    :echo get(mylist, idx, "NONE")

#### List concatenation

Two lists can be concatenated with the `"+"` operator:

    :let longlist = mylist + [5, 6]
    :let mylist += [7, 8]

To prepend or append an item turn the item into a list by putting `[]`
around it.  To change a list in-place see `list-modification` below.

#### Sublist

A part of the List can be obtained by specifying the first and last
index, separated by a colon in square brackets:

    :let shortlist = mylist[2:-1]    " get List [3, "four"]

Omitting the first index is similar to zero.  Omitting the last index is
similar to -1.

    :let endlist = mylist[2:]    " from item 2 to the end: [3, "four"]
    :let shortlist = mylist[2:2]    " List with one item: [3]
    :let otherlist = mylist[:]    " make a copy of the List

If the first index is beyond the last item of the List or the second
item is before the first item, the result is an empty list.  There is no
error message.

If the second index is equal to or greater than the length of the list
the length minus one is used:

    :let mylist = [0, 1, 2, 3]
    :echo mylist[2:8]        " result: [2, 3]

> NOTE:
>
> `mylist[s:e]` means using the variable `"s:e"` as index.  Watch out
> for using a single letter variable before the `":"`. Insert a space
> when needed:
>
>   mylist[s : e].

#### List identity

When variable `"aa"` is a list and you assign it to another variable
`"bb"`, both variables refer to the same list.  Thus changing the list
`"aa"` will also change `"bb"`:
    
    :let aa = [1, 2, 3]
    :let bb = aa
    :call add(aa, 4)
    :echo bb
    
    >>> [1, 2, 3, 4]

Making a copy of a list is done with the |copy()| function.  Using [:] also
works, as explained above.  This creates a shallow copy of the list: Changing
a list item in the list will also change the item in the copied list: >
    
    :let aa = [[1, 'a'], 2, 3]
    :let bb = copy(aa)
    :call add(aa, 4)
    :let aa[0][1] = 'aaa'
    :echo aa

    >>> [[1, aaa], 2, 3, 4]
    
    :echo bb
    
    >>> [[1, aaa], 2, 3]

To make a completely independent list use `deepcopy()`.  This also makes
a copy of the values in the list, recursively.  Up to a hundred levels
deep.

The operator `"is"` can be used to check if two variables refer to the
same List.  `"isnot"` does the opposite.  In contrast `"=="` compares if
two lists have the same value.
    
    :let alist = [1, 2, 3]
    :let blist = [1, 2, 3]
    :echo alist is blist
    
    >>> 0
    
    :echo alist == blist
    
    >>> 1

Note about comparing lists: Two lists are considered equal if they have
the same length and all items compare equal, as with using `"=="`.
There is one exception: When comparing a number with a string they are
considered different.  There is no automatic type conversion, as with
using `"=="` on variables.  Example:
    
    echo 4 == "4"
    
    >>> 1
    
    echo [4] == ["4"]
    
    >>> 0

Thus comparing Lists is more strict than comparing numbers and strings.
You can compare simple values this way too by putting them in a list:

    :let a = 5
    :let b = "5"
    :echo a == b

    >>>> 1
    
    :echo [a] == [b]
    
    >>>>0


#### List unpack

To unpack the items in a list to individual variables, put the variables
in square brackets, like list items:
    
    :let [var1, var2] = mylist

When the number of variables does not match the number of items in the
list this produces an error.  To handle any extra items from the list
append ";" and a variable name:
    
    :let [var1, var2; rest] = mylist

This works like:
    
    :let var1 = mylist[0]
    :let var2 = mylist[1]
    :let rest = mylist[2:]

Except that there is no error if there are only two items.  "rest" will
be an empty list then.


#### List modification

To change a specific item of a list use `:let` this way:

    :let list[4] = "four"
    :let listlist[0][3] = item

To change part of a list you can specify the first and last item to be
modified.  The value must at least have the number of items in the
range:
    
    :let list[3:5] = [3, 4, 5]

Adding and removing items from a list is done with functions.  Here are
a few examples:
    
    :call insert(list, 'a')       " prepend item 'a'
    :call insert(list, 'a', 3)    " insert item 'a' before list[3]
    :call add(list, "new")        " append String item
    :call add(list, [1, 2])       " append a List as one new item
    :call extend(list, [1, 2])    " extend the list with
                                  " two more items
    :let i = remove(list, 3)      " remove item 3
    :unlet list[3]                " idem
    :let l = remove(list, 3, -1)  " remove items 3 to last item
    :unlet list[3 : ]             " idem
    :call filter(list, 'v:val !~ "x"')  " remove items with an 'x'

Changing the order of items in a list:
    
    :call sort(list)        " sort a list alphabetically
    :call reverse(list)     " reverse the order of items

#### For loop

The `:for` loop executes commands for each item in a list.  A variable
is set to each item in the list in sequence.  Example:
    
    :for item in mylist
    :   call Doit(item)
    :endfor

This works like:
    
    :let index = 0
    :while index < len(mylist)
    :   let item = mylist[index]
    :   :call Doit(item)
    :   let index = index + 1
    :endwhile

Note that all items in the list should be of the same type, otherwise
this results in error `E706`.  To avoid this `:unlet` the variable at
the end of the loop.

If all you want to do is modify each item in the list then the `map()`
function will be a simpler method than a for loop.

Just like the `:let` command, `:for` also accepts a list of variables.
This requires the argument to be a list of lists.
    
    :for [lnum, col] in [[1, 3], [2, 8], [3, 0]]
    :   call Doit(lnum, col)
    :endfor

This works like a `:let` command is done for each list item.  Again, the
types must remain the same to avoid an error.

It is also possible to put remaining items in a List variable:
    
    :for [i, j; rest] in listlist
    :   call Doit(i, j)
    :   if !empty(rest)
    :      echo "remainder: " . string(rest)
    :   endif
    :endfor

#### List functions

Functions that are useful with a List:

    :let r = call(funcname, list)   " call a function with an
                                    " argument list
    :if empty(list)                 " check if list is empty
    :let l = len(list)              " number of items in list
    :let big = max(list)            " maximum value in list
    :let small = min(list)          " minimum value in list
    :let xs = count(list, 'x')      " count nr of times 'x' appears
                                    " in list
    :let i = index(list, 'x')       " index of first 'x' in list
    :let lines = getline(1, 10)     " get ten text lines from buffer
    :call append('$', lines)        " append text lines in buffer
    :let list = split("a b c")      " create list from items in
                                    " a string
    :let string = join(list, ', ')  " create string from list items
    :let s = string(list)           " String representation of list
    :call map(list, '">> " . v:val') " prepend ">> " to each item

Don't forget that a combination of features can make things simple.  For
example, to add up all the numbers in a list:

    :exe 'let sum = ' . join(nrlist, '+')

### :help add()

`add({list}, {expr})`
:   Append the item {expr} to `List` {list}.  Returns the resulting
    `List`.  Examples:
        
        :let alist = add([1, 2, 3], item)
        :call add(mylist, "woodstock")
     
    Note that when {expr} is a `List` it is appended as a single
    item.  Use `extend()` to concatenate `Lists`.
    Use `insert()` to add an item at another position.

### :help len()

`len({expr})`
:   The result is a Number, which is the length of the argument.
    When `{expr}` is a String or a Number the length in bytes is used,
    as with `strlen()`.
    
    When `{expr}` is a `List` the number of items in the `List` is
    returned.
    
    When `{expr}` is a `Dictionary` the number of entries in the
    `Dictionary` is returned.  Otherwise an error is given.

### :help get()

`get({list}, {idx} [, {default}])`
:   Get item `{idx}` from `List` `{list}`.  When this item is not
    available return `{default}`.  Return zero when `{default}` is
    omitted.
    
`get({dict}, {key} [, {default}])`
:   Get item with key `{key}` from `Dictionary` `{dict}`.  When this
    item is not available return `{default}`.  Return zero when
    `{default}` is omitted.

### :help index()

`index({list}, {expr} [, {start} [, {ic}]])`
:   Return the lowest index in `List` `{list}` where the item has a
    value equal to `{expr}`.  There is no automatic conversion, so the
    String "4" is different from the Number 4.  And the number 4 is
    different from the Float 4.0.  The value of 'ignorecase' is not used
    here, case always matters.  If `{start}` is given then start looking
    at the item with index `{start}` (may be negative for an item
    relative to the end).  When `{ic}` is given and it is non-zero,
    ignore case.  Otherwise case must match.  -1 is returned when
    `{expr}` is not found in `{list}`.
    
    Example:

        :let idx = index(words, "the")
        :if index(numbers, 123) >= 0

### :help join()

`join({list} [, {sep}])`
:   Join the items in `{list}` together into one String.
    When `{sep}` is specified it is put in between the items.  If
    `{sep}` is omitted a single space is used.  Note that `{sep}` is not
    added at the end.  You might want to add it there too:
        
        let lines = join(mylist, "\n") . "\n"
    
    String items are used as-is.  `Lists` and `Dictionaries` are
    converted into a string like with `string()`.  The opposite function
    is `split()`.

### :help reverse()

`reverse({list})`
:   Reverse the order of items in `{list}` in-place. Returns `{list}`.
    If you want a list to remain unmodified make a copy first:

        :let revlist = reverse(copy(mylist))

Exercises
---------

Skim `:help functions` to find some other list-related functions I haven't
mentioned yet.  Run `:match Keyword /\clist/` to case-insensitively highlight
the word `list` to make it easier to find what you're looking for.

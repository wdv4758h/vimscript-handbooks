Status Lines
============

Vim allows you to customize the text in the status line at the bottom of
each window.  This is done through the `statusline` option.  Run the
following command:

    :set statusline=%f

You should see the path to the file (relative to the current directory)
in the status line.  Now run this command:

    :set statusline=%f\ -\ FileType:\ %y

Now you'll see something like `foo.markdown - FileType: [markdown]` in
the status line.

If you're familiar with C's `printf` or Python's string interpolation
the format of this option may look familiar.  If not, the only trick is
that things that start with `%` are expanded to different text depending
on what comes after them.  In our example `%f` is replaced with the
filename and `%y` is replaced with the type of the file.

Notice how the spaces in the status line need to be escaped with
backslashes.  This is because `set` allows you to set multiple options
at once, as we saw in the second chapter.

Status lines can get extremely complicated very quickly, so there's a
better way to set them that will let us be more clear.  Run the
following commands:

    :set statusline=%f         " Path to the file
    :set statusline+=\ -\      " Separator
    :set statusline+=FileType: " Label
    :set statusline+=%y        " Filetype of the file

In the first command we used `=` to wipe out any existing value present.
In the rest we used `+=` to build up the option one piece at a time.  We
also added comments explaining each piece for other people reading the
code (or ourselves several months later).

Run the following commands:

    :set statusline=%l    " Current line
    :set statusline+=/    " Separator
    :set statusline+=%L   " Total lines

Now the status line contains only the current line number and number of
lines in the file, and looks something like `12/223`.

Width and Padding
-----------------

Additional characters can be used in some of the various `%` codes to
change how the information is displayed.  Run the following command:

    :set statusline=[%4l]

The line number in the status line will now be preceded by enough spaces
to make it at least four characters wide (for example: `[  12]`).  This
can be useful to prevent the text in the status line from shifting
around distractingly.

By default the padding spaces are added on the left side of the value.
Run this command:

    :set statusline=Current:\ %4l\ Total:\ %4L

Your status line will now look like this:

    Current:   12 Total:  223

You can use `-` to place padding on the right instead of the left.  Run
this command:

    :set statusline=Current:\ %-4l\ Total:\ %-4L

Your status line will now look like this:

    Current: 12   Total: 223 

This looks much nicer because the numbers are next to their labels.

For codes that result in a number you can tell Vim to pad with zeros
instead of spaces.  Run the following command:

    :set statusline=%04l

Now your status line will read `0012` when on line twelve.

Finally, you can also set the maximum width of a code's output.  Run
this command:

    :set statusline=%F

`%F` displays the *full* path to the current file.  Now run this command
to change the maximum width:

    :set statusline=%.20F

The path will be truncated if necessary, looking something like this:

    <hapters/17.markdown

This can be useful for preventing paths and other long codes from taking
up the entire line.

General Format
--------------

The general format for a code in a status line is shown in `:help
statusline`:

    %-0{minwid}.{maxwid}{item}

Everything except the `%` and the item is optional.

Splitting
---------

We're not going to cover status lines in too much detail here (Vim's own
documentation on them is very extensive if you want to learn more), but
there's one more simple code that can be very useful immediately.  Run
the following commands:

    :set statusline=%f         " Path to the file
    :set statusline+=%=        " Switch to the right side
    :set statusline+=%l        " Current line
    :set statusline+=/         " Separator
    :set statusline+=%L        " Total lines

Now the status line will contain the path to the file on the left side,
and the current/total lines on the right side.  The `%=` code tells Vim
that everything coming after that should be aligned (as a whole) to the
right instead of the left.

From the help system
--------------------

### :help statusline

`'statusline'` `'stl'` string (default empty) global or local to window.
When nonempty, this option determines the content of the status line.
Also see `status-line`.

The option consists of printf style '%' items interspersed with normal
text.  Each status line item is of the form:

    %-0{minwid}.{maxwid}{item}

All fields except the {item} is optional.  A single percent sign can be
given as `"%%"`.  Up to 80 items can be specified.

When the option starts with `"%!"` then it is used as an expression,
evaluated and the result is used as the option value.  Example:

    :set statusline=%!MyStatusLine()

The result can contain `%{}` items that will be evaluated too.  Note
that the `"%!"` expression is evaluated in the context of the current
window and buffer, while `%{}` items are evaluated in the context of the
window that the statusline belongs to.

When there is error while evaluating the option then it will be made
empty to avoid further errors.  Otherwise screen updating would loop.

Note that the only effect of 'ruler' when this option is set (and
'laststatus' is 2) is controlling the output of `CTRL-G`.

------------------------------------------------------------------
field       meaning
--------    ------------------------------------------------------
`-`         Left justify the item.  The default is right justified
            when minwid is larger than the length of the item.

`0`         Leading zeroes in numeric items.  Overridden by '-'.

`minwid`    Minimum width of the item, padding as set by '-' & '0'.
            Value must be 50 or less.

`maxwid`    Maximum width of the item.  Truncation occurs with a '<'
            on the left for text items.  Numeric items will be
            shifted down to maxwid-2 digits followed by '>'number
            where number is the amount of missing digits, much like
            an exponential notation.

`item`      A one letter code as described below.
--------    ------------------------------------------------------

Following is a description of the possible statusline items.  The
second character in `"item"` is the type:

* `N` for number
* `S` for string
* `F` for flags as described below
* `-` not applicable

------------------------------------------------------------------------
item        meaning
-------     ------------------------------------------------------------
`f` `S`     Path to the file in the buffer, as typed or relative to current
            directory.

`F` `S`     Full path to the file in the buffer.

`t` `S`     File name (tail) of file in the buffer.

`m` `F`     Modified flag, text is `"[+]"`; `"[-]"` if 'modifiable' is off.

`M` `F`     Modified flag, text is `",+"` or `",-"`.

`r` `F`     Readonly flag, text is `"[RO]"`.

`R` `F`     Readonly flag, text is `",RO"`.

`h` `F`     Help buffer flag, text is `"[help]"`.

`H` `F`     Help buffer flag, text is `",HLP"`.

`w` `F`     Preview window flag, text is `"[Preview]"`.

`W` `F`     Preview window flag, text is `",PRV"`.

`y` `F`     Type of file in the buffer, e.g., `"[vim]"`.  See 'filetype'.

`Y` `F`     Type of file in the buffer, e.g., `",VIM"`.  See 'filetype'.
            {not available when compiled without `+autocmd` feature}

`q` `S`     `"[Quickfix List]"`, `"[Location List]"` or empty.

`k` `S`     Value of `"b:keymap_name"` or 'keymap' when `:lmap` mappings are
            being used: `"<keymap>"`

`n` `N`     Buffer number.

`b` `N`     Value of character under cursor.

`B` `N`     As above, in hexadecimal.

`o` `N`     Byte number in file of byte under cursor, first byte is 1.
            Mnemonic: Offset from start of file (with one added)
            {not available when compiled without `+byte_offset` feature}

`O` `N`     As above, in hexadecimal.

`N` `N`     Printer page number.  (Only works in the 'printheader' option.)

`l` `N`     Line number.

`L` `N`     Number of lines in buffer.

`c` `N`     Column number.

`v` `N`     Virtual column number.

`V` `N`     Virtual column number as -{num}.  Not displayed if equal to 'c'.

`p` `N`     Percentage through file in lines as in `CTRL-G`.

`P` `S`     Percentage through file of displayed window.  This is like the
            percentage described for 'ruler'.  Always 3 in length, unless
            translated.

`a` `S`     Argument list status as in default title.  ({current} of {max})
            Empty if the argument file count is zero or one.

`{ N F`     Evaluate expression between '%{' and '}' and substitute result.
            Note that there is no '%' before the closing '}'.

`(` `-`     Start of item group.  Can be used for setting the width and
            alignment of a section.  Must be followed by %) somewhere.

`)` `-`     End of item group.  No width fields allowed.

`T` `N`     For 'tabline': start of tab page N label.  Use %T after the last
            label.  This information is used for mouse clicks.

`X` `N`     For 'tabline': start of close tab N label.  Use %X after the
            label, e.g.: %3Xclose%X.  Use %999X for a `"close current tab"`
            mark.  This information is used for mouse clicks.

`<` `-`     Where to truncate line if too long.  Default is at the start.
            No width fields allowed.

`=` `-`     Separation point between left and right aligned items.
            No width fields allowed.

`#` `-`     Set highlight group.  The name must follow and then a # again.
            Thus use %#HLname# for highlight group HLname.  The same
            highlighting is used, also for the statusline of non-current
            windows.

`*` `-`     Set highlight group to User{N}, where {N} is taken from the
            minwid field, e.g. %1*.  Restore normal highlight with %* or %0*.
            The difference between User{N} and StatusLine  will be applied
            to StatusLineNC for the statusline of non-current windows.
            The number N must be between 1 and 9.  See `hl-User1..9`
-------     ------------------------------------------------------------

When displaying a flag, Vim removes the leading comma, if any, when that
flag comes right after plaintext.  This will make a nice display when
flags are used like in the examples below.

When all items in a group becomes an empty string (i.e. flags that are
not set) and a minwid is not set for the group, the whole group will
become empty.  This will make a group like the following disappear
completely from the statusline when none of the flags are set.

    :set statusline=...%(\ [%M%R%H]%)...

Beware that an expression is evaluated each and every time the status
line is displayed.  The current buffer and current window will be set
temporarily to that of the window (and buffer) whose statusline is
currently being drawn.  The expression will evaluate in this context.
The variable `"actual_curbuf"` is set to the `'bufnr()'` number of the
real current buffer.

The `'statusline'` option will be evaluated in the `sandbox` if set from
a modeline, see `sandbox-option`.

It is not allowed to change text or jump to another window while
evaluating `'statusline'` `textlock`.

If the statusline is not updated when you want it (e.g., after setting a
variable that's used in an expression), you can force an update by
setting an option without changing its value.  Example:

    :let &ro = &ro

A result of all digits is regarded a number for display purposes.
Otherwise the result is taken as flag text and applied to the rules
described above.

Watch out for errors in expressions.  They may render Vim unusable!  If
you are stuck, hold down `':'` or `'Q'` to get a prompt, then quit and
edit your .vimrc or whatever with `"vim -u NONE"` to get it right.

Examples: Emulate standard status line with 'ruler' set

    :set statusline=%<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P

Similar, but add ASCII value of char under the cursor (like `"ga"`)

    :set statusline=%<%f%h%m%r%=%b\ 0x%B\ \ %l,%c%V\ %P

Display byte count and byte value, modified flag in red.

    :set statusline=%<%f%=\ [%1*%M%*%n%R%H]\ %-19(%3l,%02c%03V%)%O'%02b'
    :hi User1 term=inverse,bold cterm=inverse,bold ctermfg=red
  
Display a ,GZ flag if a compressed file is loaded

    :set statusline=...%r%{VarExists('b:gzflag','\ [GZ]')}%h...

In the `:autocmd`'s:

    :let b:gzflag = 1

And:

    :unlet b:gzflag

And define this function:

    :function VarExists(var, val)
    :    if exists(a:var) | return a:val | else | return '' | endif
    :endfunction

Exercises
---------

Skim the list of available codes in `:help statusline`.  Don't worry if
you don't understand some of them just yet.

Add some lines to your `~/.vimrc` file to build yourself a custom status
line.  Be sure to use the `+=` form of `set` to split the definition
across multiple lines, and add a comment on each line to document what
each piece does.

Try using autocommands and `setlocal` to define different status lines
for different filetypes.  Make sure to wrap the autocommands in groups
to prevent duplication (as always).

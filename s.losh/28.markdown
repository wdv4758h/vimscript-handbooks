Execute
=======

The `execute` command is used to evaluate a string as if it were a
Vimscript command.  We saw it in an earlier chapter, but now that we
know a bit more about Vimscript Strings we're going to take another
look.

Basic Execution
---------------

Run the following command:

    :execute "echom 'Hello, world!'"

Vim evaluates `echom 'Hello, world!'` as a command and dutifully echoes
it to the screen and message log.  Execute is a very powerful tool
because it lets you build commands out of arbitrary strings.

Let's try a more useful example.  Prepare by opening a file in Vim, then
using `:edit foo.txt` in the same window to open a new buffer.  Now run
the following command:

    :execute "rightbelow vsplit " . bufname("#")

Vim will open the first file in a vertical split to the right of the
second file.  What happened here?

First, Vim builds the command string by concatenating `"rightbelow
vsplit "` with the result of the `bufname("#")` call.

We'll look at the function more later, but for now just trust that it
returns the path of the previous buffer.  You can play with it using
`echom` if you want to see for yourself.

Once `bufname` is evaluated Vim the string `"rightbelow vsplit
bar.txt"`.  The `execute` command evaluates this as a Vimscript command
which opens the split with the file.

Is Execute Dangerous?
---------------------

In most programming languages the use of such an "eval" construct to
evaluate strings as program code is frowned upon (to put it lightly).
Vimscript's `execute` command doesn't have the same stigma for two
reasons.

First, most Vimscript code only ever takes input from a single person:
the user.  If the user wants to input a tricky string that will cause an
`execute` command to do something bad, well, it's their computer!
Contrast this with other languages, where programs constantly take input
from untrusted users.  Vim is a unique environment where the normal
security concerns simply aren't common.

The second reason is that because Vimscript has sometimes arcane and
tricky syntax, `execute` is often the easiest, most straightforward way
to get something done.  In most other languages using an "eval"
construct won't usually save you much typing, but in Vimscript it can
collapse many lines into a single one.

Fromt the help system
---------------------

### :help execute

`:exe[cute] {expr1} ..`
:   Executes the string that results from the evaluation of `{expr1}`
    as an Ex command.  Multiple arguments are concatenated, with a space
    in between.  To avoid the extra space use the `"."` operator to
    concatenate strings into one argument.  `{expr1}` is used as the
    processed command, command line editing keys are not recognized.
    Cannot be followed by a comment. Examples:

        :execute "buffer" nextbuf
        :execute "normal" count . "w"

    `":execute"` can be used to append a command to commands that don't
    accept a '|'.  Example:
    
        :execute '!ls' | echo "theend"

    `":execute"` is also a nice way to avoid having to type control
    characters in a Vim script for a `":normal"` command:
        
        :execute "normal ixxx\<Esc>"

    This has an `<Esc>` character, see `expr-string`.

    Be careful to correctly escape special characters in file names.
    The `fnameescape()` function can be used for Vim commands,
    `shellescape()` for `:!` commands.  Examples:

        :execute "e " . fnameescape(filename)
        :execute "!ls " . shellescape(expand('%:h'), 1)

    > Note:
    >
    > The executed string may be any command-line, but you cannot start
    > or end a `"while"`, `"for"` or `"if"` command.  Thus this is
    > illegal:
        
        :execute 'while i > 5'
        :execute 'echo "test" | break'

    It is allowed to have a `"while"` or `"if"` command completely in
    the executed string:
        
        :execute 'while i < 5 | echo i | let i = i + 1 | endwhile'

    `":execute"`, `":echo"` and `":echon"` cannot be followed by a
    comment directly, because they see the '"' as the start of a string.
    But, you can use '|' followed by a comment.  Example:

        :echo "foo" | "this is a comment

### :help leftabove

`:lefta[bove] {cmd}`\
`:abo[veleft] {cmd}`
:   Execute `{cmd}`.  If it contains a command that splits a window, it
    will be opened left (vertical split) or above (horizontal split) the
    current window.  Overrules `'splitbelow'` and `'splitright'`.
    Doesn't work for `:execute` and `:normal`.

### :help rightbelow

`:rightb[elow] {cmd}`\
`:bel[owright] {cmd}`
:   Execute `{cmd}`.  If it contains a command that splits a window, it
    will be opened right (vertical split) or below (horizontal split)
    the current window.  Overrules `'splitbelow'` and `'splitright'`.
    Doesn't work for `:execute` and `:normal`.

### :help :split

`:[N]sp[lit] [++opt] [+cmd]`
:   Split current window in two.  The result is two viewports on the
    same file.  Make new window N high (default is to use half the
    height of the current window).  Reduces the current window height to
    create room (and others, if the `'equalalways'` option is set,
    `'eadirection'` isn't `"hor"`, and one of them is higher than the
    current or the new window).  Note: CTRL-S does not work on all
    terminals and might block further input, use CTRL-Q to get going
    again.

### :help :vsplit

`:[N]vs[plit] [++opt] [+cmd] [file]`
:   Like `:split`, but split vertically.  The windows will be spread
    out horizontally if

    1. a width was not specified,
    2. `'equalalways'` is set,
    3. `'eadirection'` isn't `"ver"`, and
    4. one of the other windows is wider than the current or new
       window.

    > Note:
    >
    > In other places CTRL-Q does the same as CTRL-V, but here it
    > doesn't!

Exercises
---------

Skim `:help execute` to get an idea of some of the things you can and can't use
`execute` for.  Don't dive too deeply yet -- we're going to revisit it very
soon.

Add a mapping to your `~/.vimrc` file that opens the previous buffer in a split
of your choosing (vertical/horizontal, above/below/left/right).
